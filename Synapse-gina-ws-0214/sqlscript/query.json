{
	"name": "query",
	"properties": {
		"folder": {
			"name": "SQL Serverless/CreateStatisticsTest"
		},
		"content": {
			"query": "-- EXEC sp_set_session_context @key = N'tenantId', @value = '20221019-SL-102047-d60', @read_only=1;\n-- EXEC sp_set_session_context @key = N'tenantId', @value = 'L12345', @read_only=1;\nDECLARE @TenantId NVARCHAR(50) = 'tenant-id-L12345';\nDECLARE @Interval NVARCHAR(50) = 'Monthly';\nDECLARE @StartDateUtc DATETIME2 = '2021-05-01';\nDECLARE @EndDateUtc DATETIME2 = '2022-04-01';\n-- DECLARE @StartDateUtc DATETIME2 = '2021-06-01';\n-- DECLARE @EndDateUtc DATETIME2 = '2022-05-01';\nDECLARE @Source NVARCHAR(50) = '_ROLLUP_';\nDECLARE @Department NVARCHAR(50) = '_ROLLUP_';\nDECLARE @Geo NVARCHAR(50) = '_ROLLUP_';\nDECLARE @Occupation NVARCHAR(50) = '_ROLLUP_';\nDECLARE @QueryRank INT = 10;\nDECLARE @ResultRank INT = 3;\nDECLARE @AuFilterCnt INT = 2;\n\nwith puid_set as (\nSELECT Q\nFROM\n   (SELECT Q,value as puid \n         FROM\n              (SELECT Q, (CASE WHEN (PUID is NULL OR TRIM(PUID) = '') THEN 'a,b,c,d,e' ELSE PUID END) AS PUID2\n               FROM (select Q, TQ, NCQ, AQ, NRQ, PUID\n                     FROM QueryDetailsFunc(@TenantId, @Interval, @StartDateUtc, @EndDateUtc)  \n                     WHERE  (@Department = '_ROLLUP_' OR D = @Department) \n                         AND (@Geo = '_ROLLUP_' OR G = @Geo) AND (@Occupation = '_ROLLUP_' OR O = @Occupation) \n                         AND (@Source = '_ROLLUP_' OR S = @Source)  ) ccc\n              ) tmp\n              CROSS APPLY STRING_SPLIT(TRIM(PUID2), ',')\n              ) pu\n     GROUP BY Q HAVING COUNT(DISTINCT(puid)) >= @AUFilterCnt \n), query_rank_base as (\n    SELECT * FROM (\n    SELECT cc.Q,  SUM(TQ) as TQ, SUM(NCQ) as NCQ, SUM(AQ) as AQ, SUM(NRQ) as NRQ,\n        ROW_NUMBER() OVER (ORDER BY SUM(TQ) DESC) AS queryRank, \n        ROW_NUMBER() OVER (ORDER BY SUM(AQ) DESC) AS AQRank, ROW_NUMBER() OVER (ORDER BY SUM(NRQ) DESC) AS NRQRank\n    FROM \n          puid_set p,\n          (select Q, TQ, NCQ, AQ, NRQ\n          FROM QueryDetailsFunc(@TenantId, @Interval, @StartDateUtc, @EndDateUtc)  \n          WHERE  (@Department = '_ROLLUP_' OR D = @Department) \n           AND (@Geo = '_ROLLUP_' OR G = @Geo) AND (@Occupation = '_ROLLUP_' OR O = @Occupation) \n           AND (@Source = '_ROLLUP_' OR S = @Source)) cc\n    WHERE p.Q = cc.Q \n    GROUP BY cc.Q\n    )q WHERE queryRank <= @QueryRank OR AQRank <= @QueryRank OR NRQRANK <= @QueryRank\n)\n\nSELECT Q as QueryText, 'EngagedQuery' as ResultType, Count, Clicks, URL, DN, TP, IMP, CLK, ARP, LID \nFROM (\n    SELECT Q, E AS TP, LID, MAX(LastU) AS URL, MAX(LastDN) AS DN, SUM(TI) AS IMP, SUM(TC) AS CLK,\n        CASE WHEN (SUM(TI) = 0) THEN 0 ELSE SUM(TI*AP)/CAST(SUM(TI) AS FLOAT) END AS ARP, ROW_NUMBER() OVER (PARTITION BY Q ORDER BY SUM(TI) DESC, SUM(TC) DESC) AS resultRank,\n        AVG(TQ) as Count, AVG(Clicks) as Clicks\n    FROM (\n        SELECT Q, E, LID, TI, TC, AP, TQ, Clicks,\n               FIRST_VALUE(DN) OVER (PARTITION BY Q, E, LID ORDER BY DATE DESC) AS LastDN, \n               FIRST_VALUE(U) OVER (PARTITION BY Q, E, LID ORDER BY DATE DESC) AS LastU\n        FROM\n        \n        (   select b.Q, TQ, Clicks,\n                   CASE WHEN (c.DATE is null) THEN '1990-01-01' ELSE c.DATE END as DATE,\n                   CASE WHEN (c.LID is null) THEN '' ELSE c.LID END as LID,\n                   CASE WHEN (c.DN is null) THEN '' ELSE c.DN END as DN,\n                   CASE WHEN (c.U is null) THEN '' ELSE c.U END as U,\n                   CASE WHEN (c.E is null) THEN '' ELSE c.E END as E,\n                   CASE WHEN (c.TI is null) THEN 0 ELSE c.TI END as TI,\n                   CASE WHEN (c.TC is null) THEN 0 ELSE c.TC END as TC,\n                   CASE WHEN (c.AP is null) THEN 0 ELSE c.AP END as AP\n                --    c.LID, c.DN, c.U, c.E, c.TI, c.TC, c.AP\n            from\n                (select Q, TQ, (TQ - NCQ) as Clicks from query_rank_base qb where queryRank <= @QueryRank) b\n                LEFT JOIN\n                (select * from QueryResultFunc(@TenantId, @Interval, @StartDateUtc, @EndDateUtc)\n                 WHERE (@Department = '_ROLLUP_' OR D = @Department) \n                    AND (@Geo = '_ROLLUP_' OR G = @Geo) AND (@Occupation = '_ROLLUP_' OR O = @Occupation) \n                    AND (@Source = '_ROLLUP_' OR S = @Source)  \n                ) c\n            ON c.Q = b.Q\n        )t\n    ) qr1  GROUP BY Q, E, LID\n)ccc where resultRank <= @ResultRank\nUNION ALL\nSELECT * FROM (\n    SELECT Q as QueryText , 'Abandoned' AS ResultType, AQ AS Count, 0 as Clicks, '' as URL, '' as DN, '' as TP, 0 as IMP, 0 as CLK, 0 as ARP, '' as LID \n    FROM query_rank_base qb  \n    WHERE AQRank <= @QueryRank\n    -- ORDER BY Count DESC\n) a\nUNION ALL\nSELECT * FROM (\n    SELECT Q as QueryText , 'NoResult' AS ResultType, NRQ AS Count, 0 as Clicks, '' as URL, '' as DN, '' as TP, 0 as IMP, 0 as CLK, 0 as ARP, '' as LID \n    FROM query_rank_base qb\n    WHERE NRQRank <= @QueryRank\n    -- ORDER BY Count DESC\n) b\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "testCRUD",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}