{
	"name": "function",
	"properties": {
		"folder": {
			"name": "SQL Serverless/CreateStatisticsTest"
		},
		"content": {
			"query": "--USE synapseFunctions\n--GO\nDROP FUNCTION IF EXISTS UsageDetailFunc\nDROP FUNCTION IF EXISTS AnswerUsageFunc\nDROP FUNCTION IF EXISTS ConnectorUsageFunc\nDROP FUNCTION IF EXISTS QueryDetailsFunc\nDROP FUNCTION IF EXISTS QueryResultFunc\nDROP FUNCTION IF EXISTS AnswerDetailFunc\nDROP FUNCTION IF EXISTS ConnectorDetailFunc\nDROP FUNCTION IF EXISTS OCEFunc\n\n\nif exists (select * from sys.external_tables where name = 'UsageDetailTable')\n    DROP EXTERNAL TABLE UsageDetailTable\nGO\n\nif exists (select * from sys.external_tables where name = 'QueryDetailTable')\n    DROP EXTERNAL TABLE QueryDetailTable\nGO\n\nif exists (select * from sys.external_tables where name = 'QueryResultTable')\n    DROP EXTERNAL TABLE QueryResultTable\nGO\n\nif exists (select * from sys.external_tables where name = 'ConnectorImpTable')\n    DROP EXTERNAL TABLE ConnectorImpTable\nGO\n\nif exists (select * from sys.external_data_sources where name = 'SA_REPORT_CONTAINER')\n    DROP EXTERNAL DATA SOURCE SA_REPORT_CONTAINER\nGO\n\n\nif exists (select * from sys.external_file_formats where name = 'SA_REPORT_CSV')\n    DROP EXTERNAL FILE FORMAT SA_REPORT_CSV\nGO\n\n-- Format for loading csv files, for creating external tables\nCREATE EXTERNAL FILE FORMAT [SA_REPORT_CSV] \nWITH ( FORMAT_TYPE = DELIMITEDTEXT ,\n       FORMAT_OPTIONS (\n         FIELD_TERMINATOR = ',',\n         STRING_DELIMITER = '\"',\n         PARSER_VERSION = '2.0'\n        ))\n\n-- file locations, for creating external tables\nCREATE EXTERNAL DATA SOURCE [SA_REPORT_CONTAINER] \nWITH (\n    LOCATION = 'abfss://schema@tastorageeastus1.dfs.core.windows.net',\n    CREDENTIAL = SA_REPORT_CRED\n)\n\n\n-- External Table for QueryDetails files\n--CREATE EXTERNAL TABLE QueryDetailTable (\n--    [D] NVARCHAR(1000),\n--    [G] NVARCHAR(100),\n--    [O] NVARCHAR(1000),\n--    [S] NVARCHAR(100),\n--    [Q] NVARCHAR(1000),\n--    [TQ] bigint,\n--    [AQ] bigint,\n--    [NRQ] bigint,\n--    [NCQ] bigint,\n--    [PUID] NVARCHAR(4000),\n--    TENANTID AS CAST(filepath(1) as NVARCHAR(1000)),\n--    INTERVAL AS CAST(filepath(2) as NVARCHAR(10)),\n--    INTERVAL2 AS CAST(filepath(3) as NVARCHAR(10)),\n--    DATE AS CAST(filepath(4) as date),\n--    P1 AS CAST(filepath(5) as NVARCHAR(100)),\n--    P2 AS CAST(filepath(6) as NVARCHAR(100)),\n--    P3 AS CAST(filepath(7) as NVARCHAR(100)),\n--    P4 AS CAST(filepath(8) as NVARCHAR(100)),\n--    P5 AS CAST(filepath(9) as NVARCHAR(100))\n--)\n--WITH (\n--    LOCATION = '*/Raw/*/QueryDetails_*_V1_*_*_*_*_*_*.csv',\n--    DATA_SOURCE = [SA_REPORT_CONTAINER],\n--    FILE_FORMAT = [SA_REPORT_CSV]\n--)\n--GO\n\ndrop view QueryDetailTable\n\n-- View for QueryDetails files\nCREATE view QueryDetailTable\nAS SELECT *, \nCAST(r.filepath(1) as NVARCHAR(1000)) AS TENANTID,\nCAST(r.filepath(2) as NVARCHAR(10)) AS INTERVAL,\nCAST(r.filepath(3) as NVARCHAR(10)) AS INTERVAL2,\nCAST(r.filepath(4) as date) AS DATE,\nCAST(r.filepath(5) as NVARCHAR(100)) AS P1,\nCAST(r.filepath(6) as NVARCHAR(100)) AS P2,\nCAST(r.filepath(7) as NVARCHAR(100)) AS P3,\nCAST(r.filepath(8) as NVARCHAR(100)) AS P4,\nCAST(r.filepath(9) as NVARCHAR(100)) AS P5\nfrom OPENROWSET\n(\n    BULK '*/Raw/*/QueryDetails_*_V1_*_*_*_*_*_*.csv',\n    DATA_SOURCE = 'SA_REPORT_CONTAINER',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    FIELDTERMINATOR = ','\n) \nwith (\n    [D] NVARCHAR(1000),\n    [G] NVARCHAR(100),\n    [O] NVARCHAR(1000),\n    [S] NVARCHAR(100),\n    [Q] NVARCHAR(1000),\n    [TQ] bigint,\n    [AQ] bigint,\n    [NRQ] bigint,\n    [NCQ] bigint,\n    [PUID] NVARCHAR(4000)\n)as r\n\n--select top 1 * from QueryDetailTable\n\n-- Function 1 from QueryDetailTable, excluding QueryMap, to simplify queries only including statistic volumns\nCREATE FUNCTION QueryDetailsFunc(@tenantId NVARCHAR(50), @interval NVARCHAR(50), @startDate DATETIME2, @endDate DATETIME2)\nRETURNS TABLE\nAS\nRETURN\n(\n    SELECT DATE, D, G, O,S, Q, TQ,AQ, NRQ, NCQ, PUID \n    FROM QueryDetailTable where  TENANTID = @tenantId\n     AND DATE >= @startDate AND DATE <= @endDate AND INTERVAL = @interval AND INTERVAL2 = @interval\n \n);\nGO\n\n-- External table for QueryResult files\nCREATE EXTERNAL TABLE QueryResultTable (\n    [D] NVARCHAR(1000),\n    [G] NVARCHAR(100),\n    [O] NVARCHAR(1000),\n    [S] NVARCHAR(100),\n    [Q] NVARCHAR(1000),\n    [LID] NVARCHAR(200),\n    [DN] NVARCHAR(200),\n    [U] NVARCHAR(1000),\n    [E] NVARCHAR(50),\n    [TI] BIGINT,\n    [TC] BIGINT,\n    [AP] FLOAT,\n    TENANTID AS CAST(filepath(1) as NVARCHAR(1000)),\n    INTERVAL AS CAST(filepath(2) as NVARCHAR(10)),\n    INTERVAL2 AS CAST(filepath(3) as NVARCHAR(10)),\n    DATE AS CAST(filepath(4) as date),\n    P1 AS CAST(filepath(5) as NVARCHAR(100)),\n    P2 AS CAST(filepath(6) as NVARCHAR(100)),\n    P3 AS CAST(filepath(7) as NVARCHAR(100)),\n    P4 AS CAST(filepath(8) as NVARCHAR(100)),\n    P5 AS CAST(filepath(9) as NVARCHAR(100))\n)\nWITH (\n    LOCATION = '*/Raw/*/QueryResultsDetails_*_V1_*_*_*_*_*_*.csv',\n    DATA_SOURCE = [SA_REPORT_CONTAINER],\n    FILE_FORMAT = [SA_REPORT_CSV]\n)\nGO\n\nCREATE FUNCTION QueryResultFunc(@tenantId NVARCHAR(50), @interval NVARCHAR(50), @startDate DATETIME2, @endDate DATETIME2)\nRETURNS TABLE\nAS\nRETURN\n(\n    SELECT *\n    FROM QueryResultTable\n    where  TENANTID = @tenantId \n     AND DATE >= @startDate AND DATE <= @endDate AND INTERVAL = @interval AND INTERVAL2 = @interval\n);\nGO\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "testCRUD",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}